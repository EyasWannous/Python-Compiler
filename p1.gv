digraph G {
	root [label="Statements"]
	root -> majd_Generic;
	majd_Generic [label="Declare Fun : majd_Generic"]
	majd_Generic -> stmt5;
	stmt5 [label="Statements"]
	stmt5 -> assignment3;
	assignment3 [label="assignment"]
	assignment3 -> iden4;
	iden4 [shape=box,label="Identifier: x"]
	assignment3 -> sub2;
	sub2 [label="-"]
	sub2 -> iden0;
	iden0 [shape=box,label="Identifier: y"]
	sub2 -> int1;
	int1 [shape=box,label="int: 5"]
	stmt5 -> assignment7;
	assignment7 [label="assignment"]
	assignment7 -> iden8;
	iden8 [shape=box,label="Identifier: z"]
	assignment7 -> int6;
	int6 [shape=box,label="int: 100"]
	stmt5 -> print11;
	print11 [label="Funiction Call : print11"]
	print11 -> arg10;
	arg10 [label="Arguments"]
	arg10 -> iden9;
	iden9 [shape=box,label="Identifier: x"]
	stmt5 -> for18;
	for18 [label="for"]
	for18 -> range19;
	range19 [label="Funiction Call : range19"]
	range19 -> arg14;
	arg14 [label="Arguments"]
	arg14 -> int12;
	int12 [shape=box,label="int: 1"]
	arg14 -> int13;
	int13 [shape=box,label="int: 10"]
	for18 -> stmt17;
	stmt17 [label="Statements"]
	stmt17 -> return15;
	return15 [label="ReturnStatement"]
	return15 -> iden16;
	iden16 [shape=box,label="Identifier: x"]
	stmt5 -> return20;
	return20 [label="ReturnStatement"]
	return20 -> iden21;
	iden21 [shape=box,label="Identifier: x"]
	stmt5 -> asd;
	asd [label="Declare Fun : asd"]
	asd -> arg23;
	arg23 [label="Arguments"]
	arg23 -> iden22;
	iden22 [shape=box,label="Identifier: a"]
	arg23 -> iden24;
	iden24 [shape=box,label="Identifier: b"]
	asd -> stmt30;
	stmt30 [label="Statements"]
	stmt30 -> assignment28;
	assignment28 [label="assignment"]
	assignment28 -> iden29;
	iden29 [shape=box,label="Identifier: w"]
	assignment28 -> multi27;
	multi27 [label="*"]
	multi27 -> iden25;
	iden25 [shape=box,label="Identifier: q"]
	multi27 -> int26;
	int26 [shape=box,label="int: 3"]
	stmt30 -> assignment32;
	assignment32 [label="assignment"]
	assignment32 -> iden33;
	iden33 [shape=box,label="Identifier: e"]
	assignment32 -> int31;
	int31 [shape=box,label="int: 12"]
	stmt30 -> majd_func_call37;
	majd_func_call37 [label="Funiction Call : majd_func_call37"]
	majd_func_call37 -> arg35;
	arg35 [label="Arguments"]
	arg35 -> int34;
	int34 [shape=box,label="int: 1"]
	arg35 -> int36;
	int36 [shape=box,label="int: 2"]
	stmt30 -> while43;
	while43 [label="While"]
	while43 -> gt39;
	gt39 [label=">"]
	gt39 -> iden40;
	iden40 [shape=box,label="Identifier: x"]
	gt39 -> int38;
	int38 [shape=box,label="int: 10"]
	while43 -> stmt42;
	stmt42 [label="Statements"]
	stmt42 -> break41;
	break41 [shape=box,label="break"]
	stmt30 -> yield44;
	yield44 [label="yieldStatement"]
	yield44 -> iden45;
	iden45 [shape=box,label="Identifier: a"]
	root -> input48;
	input48 [label="Funiction Call : input48"]
	input48 -> string49;
	string49 [shape=box,label="string: Hi:"]
	root -> f;
	f [label="Declare Fun : f"]
	f -> arg51;
	arg51 [label="Arguments"]
	arg51 -> iden50;
	iden50 [shape=box,label="Identifier: x"]
	f -> stmt81;
	stmt81 [label="Statements"]
	stmt81 -> if80;
	if80 [label="If"]
	if80 -> equal53;
	equal53 [label="=="]
	equal53 -> iden54;
	iden54 [shape=box,label="Identifier: x"]
	equal53 -> int52;
	int52 [shape=box,label="int: 5"]
	if80 -> stmt57;
	stmt57 [label="Statements"]
	stmt57 -> return55;
	return55 [label="ReturnStatement"]
	return55 -> iden56;
	iden56 [shape=box,label="Identifier: x"]
	if80 -> block79;
	block79 [label="Elif..._Else"]
	block79 -> block66;
	block66 [label="Elif..."]
	block66 -> elif65;
	elif65 [label="ElIf"]
	elif65 -> equal59;
	equal59 [label="=="]
	equal59 -> iden60;
	iden60 [shape=box,label="Identifier: x"]
	equal59 -> int58;
	int58 [shape=box,label="int: 10"]
	elif65 -> stmt64;
	stmt64 [label="Statements"]
	stmt64 -> assignment62;
	assignment62 [label="assignment"]
	assignment62 -> iden63;
	iden63 [shape=box,label="Identifier: x"]
	assignment62 -> int61;
	int61 [shape=box,label="int: 5"]
	block66 -> elif74;
	elif74 [label="ElIf"]
	elif74 -> equal68;
	equal68 [label="=="]
	equal68 -> iden69;
	iden69 [shape=box,label="Identifier: x"]
	equal68 -> int67;
	int67 [shape=box,label="int: 10"]
	elif74 -> stmt73;
	stmt73 [label="Statements"]
	stmt73 -> assignment71;
	assignment71 [label="assignment"]
	assignment71 -> iden72;
	iden72 [shape=box,label="Identifier: x"]
	assignment71 -> int70;
	int70 [shape=box,label="int: 5"]
	block79 -> else78;
	else78 [label="Else"]
	else78 -> stmt77;
	stmt77 [label="Statements"]
	stmt77 -> return75;
	return75 [label="ReturnStatement"]
	return75 -> iden76;
	iden76 [shape=box,label="Identifier: x"]
	root -> if111;
	if111 [label="If"]
	if111 -> equal84;
	equal84 [label="=="]
	equal84 -> iden85;
	iden85 [shape=box,label="Identifier: x"]
	equal84 -> int83;
	int83 [shape=box,label="int: 5"]
	if111 -> stmt89;
	stmt89 [label="Statements"]
	stmt89 -> assignment87;
	assignment87 [label="assignment"]
	assignment87 -> iden88;
	iden88 [shape=box,label="Identifier: x"]
	assignment87 -> int86;
	int86 [shape=box,label="int: 1"]
	if111 -> block110;
	block110 [label="Elif..._Else"]
	block110 -> block98;
	block98 [label="Elif..."]
	block98 -> elif97;
	elif97 [label="ElIf"]
	elif97 -> equal91;
	equal91 [label="=="]
	equal91 -> iden92;
	iden92 [shape=box,label="Identifier: x"]
	equal91 -> int90;
	int90 [shape=box,label="int: 10"]
	elif97 -> stmt96;
	stmt96 [label="Statements"]
	stmt96 -> assignment94;
	assignment94 [label="assignment"]
	assignment94 -> iden95;
	iden95 [shape=box,label="Identifier: x"]
	assignment94 -> int93;
	int93 [shape=box,label="int: 5"]
	block98 -> elif106;
	elif106 [label="ElIf"]
	elif106 -> equal100;
	equal100 [label="=="]
	equal100 -> iden101;
	iden101 [shape=box,label="Identifier: x"]
	equal100 -> int99;
	int99 [shape=box,label="int: 10"]
	elif106 -> stmt105;
	stmt105 [label="Statements"]
	stmt105 -> assignment103;
	assignment103 [label="assignment"]
	assignment103 -> iden104;
	iden104 [shape=box,label="Identifier: x"]
	assignment103 -> int102;
	int102 [shape=box,label="int: 5"]
	block110 -> else109;
	else109 [label="Else"]
	else109 -> stmt108;
	stmt108 [label="Statements"]
	stmt108 -> pass107;
	pass107 [shape=box,label="Pass"]
	root -> assignment113;
	assignment113 [label="assignment"]
	assignment113 -> iden114;
	iden114 [shape=box,label="Identifier: x"]
	assignment113 -> int112;
	int112 [shape=box,label="int: 10"]
	root -> while120;
	while120 [label="While"]
	while120 -> gt116;
	gt116 [label=">"]
	gt116 -> iden117;
	iden117 [shape=box,label="Identifier: x"]
	gt116 -> int115;
	int115 [shape=box,label="int: 10"]
	while120 -> stmt119;
	stmt119 [label="Statements"]
	stmt119 -> break118;
	break118 [shape=box,label="break"]
	root -> for126;
	for126 [label="for"]
	for126 -> range127;
	range127 [label="Funiction Call : range127"]
	range127 -> arg123;
	arg123 [label="Arguments"]
	arg123 -> int121;
	int121 [shape=box,label="int: 1"]
	arg123 -> int122;
	int122 [shape=box,label="int: 10"]
	for126 -> stmt125;
	stmt125 [label="Statements"]
	stmt125 -> pass124;
	pass124 [shape=box,label="Pass"]
	root -> ahmed;
	ahmed [label="Declare Class : ahmed"]
	ahmed -> stmt129;
	stmt129 [label="Statements"]
	stmt129 -> pass128;
	pass128 [shape=box,label="Pass"]
	root -> try144;
	try144 [label="try"]
	try144 -> stmt134;
	stmt134 [label="Statements"]
	stmt134 -> assignment132;
	assignment132 [label="assignment"]
	assignment132 -> iden133;
	iden133 [shape=box,label="Identifier: x"]
	assignment132 -> int131;
	int131 [shape=box,label="int: 10"]
	try144 -> block140;
	block140 [label="Except..."]
	block140 -> except139;
	except139 [label="except"]
	except139 -> stmt138;
	stmt138 [label="Statements"]
	stmt138 -> assignment136;
	assignment136 [label="assignment"]
	assignment136 -> iden137;
	iden137 [shape=box,label="Identifier: x"]
	assignment136 -> int135;
	int135 [shape=box,label="int: 1"]
	block140 -> except143;
	except143 [label="except"]
	except143 -> stmt142;
	stmt142 [label="Statements"]
	stmt142 -> pass141;
	pass141 [shape=box,label="Pass"]
	root -> match160;
	match160 [label="Match"]
	match160 -> iden161;
	iden161 [shape=box,label="Identifier: x"]
	match160 -> block159;
	block159 [label="Match Block"]
	block159 -> block149;
	block149 [label="Case..."]
	block149 -> case148;
	case148 [label="Case Statement"]
	case148 -> int145;
	int145 [shape=box,label="int: 10"]
	case148 -> stmt147;
	stmt147 [label="Statements"]
	stmt147 -> pass146;
	pass146 [shape=box,label="Pass"]
	block149 -> case153;
	case153 [label="Case Statement"]
	case153 -> int150;
	int150 [shape=box,label="int: 15"]
	case153 -> stmt152;
	stmt152 [label="Statements"]
	stmt152 -> pass151;
	pass151 [shape=box,label="Pass"]
	block159 -> case158;
	case158 [label="Default Statement"]
	case158 -> stmt157;
	stmt157 [label="Statements"]
	stmt157 -> assignment155;
	assignment155 [label="assignment"]
	assignment155 -> iden156;
	iden156 [shape=box,label="Identifier: x"]
	assignment155 -> int154;
	int154 [shape=box,label="int: 0"]
	root -> fun;
	fun [label="Declare Fun : fun"]
	fun -> arg163;
	arg163 [label="Arguments"]
	arg163 -> iden162;
	iden162 [shape=box,label="Identifier: x"]
	fun -> stmt215;
	stmt215 [label="Statements"]
	stmt215 -> if214;
	if214 [label="If"]
	if214 -> lt165;
	lt165 [label="<"]
	lt165 -> iden166;
	iden166 [shape=box,label="Identifier: x"]
	lt165 -> int164;
	int164 [shape=box,label="int: 5"]
	if214 -> stmt170;
	stmt170 [label="Statements"]
	stmt170 -> assignment168;
	assignment168 [label="assignment"]
	assignment168 -> iden169;
	iden169 [shape=box,label="Identifier: y"]
	assignment168 -> int167;
	int167 [shape=box,label="int: 5"]
	if214 -> block213;
	block213 [label="Elif..._Else"]
	block213 -> block182;
	block182 [label="Elif..."]
	block182 -> elif181;
	elif181 [label="ElIf"]
	elif181 -> equal172;
	equal172 [label="=="]
	equal172 -> iden173;
	iden173 [shape=box,label="Identifier: h"]
	equal172 -> int171;
	int171 [shape=box,label="int: 124"]
	elif181 -> stmt177;
	stmt177 [label="Statements"]
	stmt177 -> assignment175;
	assignment175 [label="assignment"]
	assignment175 -> iden176;
	iden176 [shape=box,label="Identifier: u"]
	assignment175 -> int174;
	int174 [shape=box,label="int: 1"]
	stmt177 -> assignment179;
	assignment179 [label="assignment"]
	assignment179 -> iden180;
	iden180 [shape=box,label="Identifier: l"]
	assignment179 -> int178;
	int178 [shape=box,label="int: 5"]
	block182 -> elif193;
	elif193 [label="ElIf"]
	elif193 -> equal184;
	equal184 [label="=="]
	equal184 -> iden185;
	iden185 [shape=box,label="Identifier: b"]
	equal184 -> int183;
	int183 [shape=box,label="int: 14"]
	elif193 -> stmt189;
	stmt189 [label="Statements"]
	stmt189 -> assignment187;
	assignment187 [label="assignment"]
	assignment187 -> iden188;
	iden188 [shape=box,label="Identifier: n"]
	assignment187 -> iden186;
	iden186 [shape=box,label="Identifier: y"]
	stmt189 -> assignment191;
	assignment191 [label="assignment"]
	assignment191 -> iden192;
	iden192 [shape=box,label="Identifier: k"]
	assignment191 -> int190;
	int190 [shape=box,label="int: 7"]
	block182 -> elif204;
	elif204 [label="ElIf"]
	elif204 -> equal195;
	equal195 [label="=="]
	equal195 -> iden196;
	iden196 [shape=box,label="Identifier: o"]
	equal195 -> int194;
	int194 [shape=box,label="int: 12"]
	elif204 -> stmt200;
	stmt200 [label="Statements"]
	stmt200 -> assignment198;
	assignment198 [label="assignment"]
	assignment198 -> iden199;
	iden199 [shape=box,label="Identifier: dd"]
	assignment198 -> iden197;
	iden197 [shape=box,label="Identifier: p"]
	stmt200 -> assignment202;
	assignment202 [label="assignment"]
	assignment202 -> iden203;
	iden203 [shape=box,label="Identifier: jj"]
	assignment202 -> int201;
	int201 [shape=box,label="int: 65"]
	block213 -> else212;
	else212 [label="Else"]
	else212 -> stmt208;
	stmt208 [label="Statements"]
	stmt208 -> assignment206;
	assignment206 [label="assignment"]
	assignment206 -> iden207;
	iden207 [shape=box,label="Identifier: d"]
	assignment206 -> int205;
	int205 [shape=box,label="int: 56"]
	stmt208 -> assignment210;
	assignment210 [label="assignment"]
	assignment210 -> iden211;
	iden211 [shape=box,label="Identifier: k"]
	assignment210 -> iden209;
	iden209 [shape=box,label="Identifier: z"]
	root -> if270;
	if270 [label="If"]
	if270 -> iden217;
	iden217 [shape=box,label="Identifier: q"]
	if270 -> stmt269;
	stmt269 [label="Statements"]
	stmt269 -> if268;
	if268 [label="If"]
	if268 -> lt219;
	lt219 [label="<"]
	lt219 -> iden220;
	iden220 [shape=box,label="Identifier: x"]
	lt219 -> int218;
	int218 [shape=box,label="int: 5"]
	if268 -> stmt224;
	stmt224 [label="Statements"]
	stmt224 -> assignment222;
	assignment222 [label="assignment"]
	assignment222 -> iden223;
	iden223 [shape=box,label="Identifier: y"]
	assignment222 -> int221;
	int221 [shape=box,label="int: 5"]
	if268 -> block267;
	block267 [label="Elif..._Else"]
	block267 -> block236;
	block236 [label="Elif..."]
	block236 -> elif235;
	elif235 [label="ElIf"]
	elif235 -> equal226;
	equal226 [label="=="]
	equal226 -> iden227;
	iden227 [shape=box,label="Identifier: h"]
	equal226 -> int225;
	int225 [shape=box,label="int: 124"]
	elif235 -> stmt231;
	stmt231 [label="Statements"]
	stmt231 -> assignment229;
	assignment229 [label="assignment"]
	assignment229 -> iden230;
	iden230 [shape=box,label="Identifier: u"]
	assignment229 -> iden228;
	iden228 [shape=box,label="Identifier: i"]
	stmt231 -> assignment233;
	assignment233 [label="assignment"]
	assignment233 -> iden234;
	iden234 [shape=box,label="Identifier: l"]
	assignment233 -> int232;
	int232 [shape=box,label="int: 5"]
	block236 -> elif247;
	elif247 [label="ElIf"]
	elif247 -> equal238;
	equal238 [label="=="]
	equal238 -> iden239;
	iden239 [shape=box,label="Identifier: b"]
	equal238 -> int237;
	int237 [shape=box,label="int: 14"]
	elif247 -> stmt243;
	stmt243 [label="Statements"]
	stmt243 -> assignment241;
	assignment241 [label="assignment"]
	assignment241 -> iden242;
	iden242 [shape=box,label="Identifier: n"]
	assignment241 -> iden240;
	iden240 [shape=box,label="Identifier: y"]
	stmt243 -> assignment245;
	assignment245 [label="assignment"]
	assignment245 -> iden246;
	iden246 [shape=box,label="Identifier: k"]
	assignment245 -> int244;
	int244 [shape=box,label="int: 7"]
	block236 -> elif258;
	elif258 [label="ElIf"]
	elif258 -> equal249;
	equal249 [label="=="]
	equal249 -> iden250;
	iden250 [shape=box,label="Identifier: o"]
	equal249 -> int248;
	int248 [shape=box,label="int: 12"]
	elif258 -> stmt254;
	stmt254 [label="Statements"]
	stmt254 -> assignment252;
	assignment252 [label="assignment"]
	assignment252 -> iden253;
	iden253 [shape=box,label="Identifier: dd"]
	assignment252 -> iden251;
	iden251 [shape=box,label="Identifier: p"]
	stmt254 -> assignment256;
	assignment256 [label="assignment"]
	assignment256 -> iden257;
	iden257 [shape=box,label="Identifier: jj"]
	assignment256 -> int255;
	int255 [shape=box,label="int: 65"]
	block267 -> else266;
	else266 [label="Else"]
	else266 -> stmt262;
	stmt262 [label="Statements"]
	stmt262 -> assignment260;
	assignment260 [label="assignment"]
	assignment260 -> iden261;
	iden261 [shape=box,label="Identifier: d"]
	assignment260 -> int259;
	int259 [shape=box,label="int: 56"]
	stmt262 -> assignment264;
	assignment264 [label="assignment"]
	assignment264 -> iden265;
	iden265 [shape=box,label="Identifier: k"]
	assignment264 -> iden263;
	iden263 [shape=box,label="Identifier: z"]
	root -> with288;
	with288 [label="with"]
	with288 -> block278;
	block278 [label="With Head"]
	block278 -> block277;
	block277 [label="With Item"]
	block277 -> iden277;
	iden277 [shape=box,label="Identifier: open"]
	block277 -> block272;
	block272 [label="Parameters"]
	block272 -> string271;
	string271 [shape=box,label="string: file-path"]
	block272 -> string273;
	string273 [shape=box,label="string: w"]
	block277 -> block275;
	block275 [label="Targets"]
	block275 -> iden274;
	iden274 [shape=box,label="Identifier: file"]
	block275 -> iden276;
	iden276 [shape=box,label="Identifier: majd"]
	block278 -> block283;
	block283 [label="With Item"]
	block283 -> iden283;
	iden283 [shape=box,label="Identifier: open"]
	block283 -> block280;
	block280 [label="Parameters"]
	block280 -> string279;
	string279 [shape=box,label="string: file-path"]
	block280 -> string281;
	string281 [shape=box,label="string: w"]
	block283 -> iden282;
	iden282 [shape=box,label="Identifier: file"]
	with288 -> stmt287;
	stmt287 [label="Statements"]
	stmt287 -> assignment285;
	assignment285 [label="assignment"]
	assignment285 -> iden286;
	iden286 [shape=box,label="Identifier: x"]
	assignment285 -> int284;
	int284 [shape=box,label="int: 5"]
}
